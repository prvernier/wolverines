?sample_n
sample_n()
library(shiny)
library(sf)
library(DT)
library(tmap)
library(dplyr)
library(leaflet)
library(tidyverse)
library(shinydashboard)
?sample_n
## Load in data
grid <- st_read("data/wolverines.gpkg", "grid5k", quiet=T)
grid
linear <- st_read("data/wolverines.gpkg", "linear_features", quiet=T)
areal <- st_read("data/wolverines.gpkg", "areal_features", quiet=T)
factors <- st_read("data/wolverines.gpkg", "survey_factors", quiet=T)
factors
View(factors)
x <- mutate(factors,
placer_pct=ifelse(is.na(placer_pct),0,placer_pct),
quartz_pct=ifelse(is.na(quartz_pct),0,quartz_pct),
recent_fires_pct=ifelse(is.na(recent_fires_pct),0,recent_fires_pct),
area500_pct=ifelse(is.na(area500_pct),0,area500_pct),
line500_pct=ifelse(is.na(line500_pct),0,line500_pct),
merge100_pct=ifelse(is.na(merge100_pct),0,merge100_pct),
water_pct=ifelse(is.na(water_pct),0,water_pct),
forest_pct=ifelse(is.na(forest_pct),0,forest_pct),
wetland_pct=ifelse(is.na(wetland_pct),0,wetland_pct))
View(x)
#' sample from clusters() (defined below), number to be sampled is number
#' of samples per cluster * number of clusters
n <- sample_n(clusters(), input$size*as.numeric(input$clusters))
#' sample from clusters() (defined below), number to be sampled is number
#' of samples per cluster * number of clusters
n <- sample_n(clusters, input$size*as.numeric(input$clusters))
#clust <- kmeans(scale(cbind(x$merge100_pct,x$elev_median,x$elev_sd,x$forest_pct)),input$clusters)$cluster
y = select(x, unlist(input$factors)) %>% st_drop_geometry()
input <- list(factors = factors)
input$factors
#clust <- kmeans(scale(cbind(x$merge100_pct,x$elev_median,x$elev_sd,x$forest_pct)),input$clusters)$cluster
y = select(x, unlist(input$factors)) %>% st_drop_geometry()
x
input$factors <- c('merge100_pct', 'elev_median', 'elev_sd')
input$factors
# replace NAs with 0s
x <- mutate(factors,
placer_pct=ifelse(is.na(placer_pct),0,placer_pct),
quartz_pct=ifelse(is.na(quartz_pct),0,quartz_pct),
recent_fires_pct=ifelse(is.na(recent_fires_pct),0,recent_fires_pct),
area500_pct=ifelse(is.na(area500_pct),0,area500_pct),
line500_pct=ifelse(is.na(line500_pct),0,line500_pct),
merge100_pct=ifelse(is.na(merge100_pct),0,merge100_pct),
water_pct=ifelse(is.na(water_pct),0,water_pct),
forest_pct=ifelse(is.na(forest_pct),0,forest_pct),
wetland_pct=ifelse(is.na(wetland_pct),0,wetland_pct))
#clust <- kmeans(scale(cbind(x$merge100_pct,x$elev_median,x$elev_sd,x$forest_pct)),input$clusters)$cluster
y = select(x, unlist(input$factors)) %>% st_drop_geometry()
y
?sd_drop_geometry
?st_drop_geometry
#clust <- kmeans(scale(cbind(x$merge100_pct,x$elev_median,x$elev_sd,x$forest_pct)),input$clusters)$cluster
y <-  select(x, unlist(input$factors)) %>% st_drop_geometry()
y
input$clusters <- 4
clust <- kmeans(scale(y),input$clusters)
clust
kmeans(scale(y),input$clusters)$cluster
#' Now actually cluster cells
#' kmeans() returns a list; $cluster object is a
clust <- kmeans(scale(y),input$clusters)$cluster
typeof(clust)
class(clust)
is.vector(clust)
is.list
is.list(clust)
is.data.frame(clust)
names(clust)
mutate(x, clusters=clust)
x
n <- sample_n(clusters, input$size*as.numeric(input$clusters))
clusters
clusters <- x
n <- sample_n(clusters, input$size*as.numeric(input$clusters))
rlang::last_error()
input$size <- 15
n <- sample_n(clusters, input$size*as.numeric(input$clusters))
n
nrow(n)
input$size
?group_by
clusters
n <- clusters %>%
group_by(clusters) %>%
sample_n(size=input$size)
n <- clusters() %>%
group_by(clusters) %>%
sample_n(size=input$size)
clusters
#' add field to x with what cluster the cell is in
x <- x %>%
mutate(clusters=clust)
clusters <- x
clusters
n <- clusters %>%
group_by(clusters) %>%
sample_n(size=input$size)
n
?tm_shape
runApp()
runApp()
runApp()
shiny::runGitHub("prvernier/wolverines")
runApp()
library(shinybusy)
install.packages('shinybusy')
library(shinybusy)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?leaflet::hideGroup
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?leafletProxy
runApp()
runApp()
runApp()
runApp()
tm_shape
?tm_shape
runApp()
runApp()
